{"ast":null,"code":"var _class;\nimport { v4 as uuid } from 'uuid';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TasksService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n    this.storageTasks = [];\n  }\n  // public getToDosByStatus(status:string):ToDo[] {\n  //   return this.storageTasks.filter(storageTasks => storageTasks.status === status);\n  // }\n  getToDosByStatus(status) {\n    return this.storageTasks.filter(storageTasks => storageTasks.status === status);\n  }\n  addTask(task) {\n    this.storageTasks.push({\n      id: uuid(),\n      dateInitTodo: new Date(),\n      ...task\n    });\n  }\n  removeAllToDos() {\n    this.storageTasks.forEach(storageTasks => storageTasks.status = 'removed');\n  }\n  removeToDo(id) {\n    this.storageTasks.forEach(storageTasks => {\n      if (storageTasks.id === id) {\n        storageTasks.status = 'removed';\n      }\n    });\n  }\n  updateToDo(todo) {\n    console.log('- updateToDo: ', todo);\n    this.storageTasks.forEach(itemTodo => {\n      console.log(itemTodo);\n      if (todo.id == itemTodo.id) itemTodo.status = todo.status;\n    });\n  }\n  updateAllToDos(status) {\n    console.log('- updateAllToDos()');\n    this.storageTasks.forEach(itemTodo => {\n      if (itemTodo.status == 'removed' && status === 'end') return;\n      itemTodo.status = status;\n    });\n  }\n  resetToDos() {\n    this.storageTasks = [];\n  }\n}\n_class = TasksService;\n_class.ɵfac = function TasksService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["v4","uuid","environment","TasksService","constructor","http","apiUrl","storageTasks","getToDosByStatus","status","filter","addTask","task","push","id","dateInitTodo","Date","removeAllToDos","forEach","removeToDo","updateToDo","todo","console","log","itemTodo","updateAllToDos","resetToDos","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/aarongl/Developer/PruebasTecnicas/1-todoList/src/app/services/tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { v4 as uuid } from 'uuid';\n\nimport { environment } from 'src/environments/environment.development';\nimport { Status, ToDo } from '../interfaces/todos.interface';\nimport { Observable, catchError, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TasksService {\n  public apiUrl:string = environment.apiUrl;\n\n  public storageTasks: ToDo[] = [];\n\n  constructor(private http:HttpClient) {}\n\n  // public getToDosByStatus(status:string):ToDo[] {\n  //   return this.storageTasks.filter(storageTasks => storageTasks.status === status);\n  // }\n\n  public getToDosByStatus(status: string): ToDo[] {\n    return this.storageTasks.filter(storageTasks => storageTasks.status === status);\n  }\n\n  public addTask(task: ToDo): void {\n    this.storageTasks.push({id: uuid(), dateInitTodo: new Date(), ...task})\n    \n  }\n\n  public removeAllToDos():void {\n    this.storageTasks.forEach(storageTasks => storageTasks.status = 'removed');\n\n  }\n\n  public removeToDo(id: string): void {\n    this.storageTasks.forEach(storageTasks => {\n      if (storageTasks.id === id) {\n        storageTasks.status = 'removed'\n      }\n    });\n\n  }\n\n  public updateToDo(todo:any): void {\n    console.log('- updateToDo: ', todo);\n  \n    this.storageTasks.forEach(itemTodo => {\n      console.log(itemTodo);\n      \n      if (todo.id == itemTodo.id) itemTodo.status = todo.status;\n\n    });\n\n  }\n\n  public updateAllToDos(status:Status): void {\n    console.log('- updateAllToDos()');\n    this.storageTasks.forEach(itemTodo => {\n      \n      if (itemTodo.status == 'removed' && status === 'end') return;\n      \n      itemTodo.status = status;\n    });\n\n  }\n\n  public resetToDos(): void {\n    this.storageTasks = [];\n  }\n}\n"],"mappings":";AAGA,SAASA,EAAE,IAAIC,IAAI,QAAQ,MAAM;AAEjC,SAASC,WAAW,QAAQ,0CAA0C;;;AAOtE,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAJjB,KAAAC,MAAM,GAAUJ,WAAW,CAACI,MAAM;IAElC,KAAAC,YAAY,GAAW,EAAE;EAEM;EAEtC;EACA;EACA;EAEOC,gBAAgBA,CAACC,MAAc;IACpC,OAAO,IAAI,CAACF,YAAY,CAACG,MAAM,CAACH,YAAY,IAAIA,YAAY,CAACE,MAAM,KAAKA,MAAM,CAAC;EACjF;EAEOE,OAAOA,CAACC,IAAU;IACvB,IAAI,CAACL,YAAY,CAACM,IAAI,CAAC;MAACC,EAAE,EAAEb,IAAI,EAAE;MAAEc,YAAY,EAAE,IAAIC,IAAI,EAAE;MAAE,GAAGJ;IAAI,CAAC,CAAC;EAEzE;EAEOK,cAAcA,CAAA;IACnB,IAAI,CAACV,YAAY,CAACW,OAAO,CAACX,YAAY,IAAIA,YAAY,CAACE,MAAM,GAAG,SAAS,CAAC;EAE5E;EAEOU,UAAUA,CAACL,EAAU;IAC1B,IAAI,CAACP,YAAY,CAACW,OAAO,CAACX,YAAY,IAAG;MACvC,IAAIA,YAAY,CAACO,EAAE,KAAKA,EAAE,EAAE;QAC1BP,YAAY,CAACE,MAAM,GAAG,SAAS;;IAEnC,CAAC,CAAC;EAEJ;EAEOW,UAAUA,CAACC,IAAQ;IACxBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC;IAEnC,IAAI,CAACd,YAAY,CAACW,OAAO,CAACM,QAAQ,IAAG;MACnCF,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;MAErB,IAAIH,IAAI,CAACP,EAAE,IAAIU,QAAQ,CAACV,EAAE,EAAEU,QAAQ,CAACf,MAAM,GAAGY,IAAI,CAACZ,MAAM;IAE3D,CAAC,CAAC;EAEJ;EAEOgB,cAAcA,CAAChB,MAAa;IACjCa,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,IAAI,CAAChB,YAAY,CAACW,OAAO,CAACM,QAAQ,IAAG;MAEnC,IAAIA,QAAQ,CAACf,MAAM,IAAI,SAAS,IAAIA,MAAM,KAAK,KAAK,EAAE;MAEtDe,QAAQ,CAACf,MAAM,GAAGA,MAAM;IAC1B,CAAC,CAAC;EAEJ;EAEOiB,UAAUA,CAAA;IACf,IAAI,CAACnB,YAAY,GAAG,EAAE;EACxB;;SA3DWJ,YAAY;;mBAAZA,MAAY,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAZ3B,MAAY;EAAA4B,OAAA,EAAZ5B,MAAY,CAAA6B,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}