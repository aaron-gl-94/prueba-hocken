{"ast":null,"code":"var _class;\nimport { environment } from 'src/environments/environment.development';\nimport { catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class SessionService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = environment.apiUrl;\n  }\n  get isLoggedIn() {\n    let authToken = !!localStorage.getItem('auth');\n    console.log('- isLoggedIn: ', authToken);\n    return authToken;\n  }\n  login(userDataForm) {\n    return this.http.get(`${this.apiUrl}/users/`).pipe(tap(response => {\n      console.log('- User login data: ', response);\n      const {\n        token\n      } = response;\n    }), catchError(() => {\n      console.log('- Error al autenticar usuario...');\n    }));\n  }\n}\n_class = SessionService;\n_class.ɵfac = function SessionService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","catchError","tap","SessionService","constructor","http","router","apiUrl","isLoggedIn","authToken","localStorage","getItem","console","log","login","userDataForm","get","pipe","response","token","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/aarongl/Developer/PruebasTecnicas/1-todoList/src/app/services/session.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\nimport { environment } from 'src/environments/environment.development';\nimport { v4 as uuid } from 'uuid';\nimport { User } from '../interfaces/users.interface';\nimport { Observable, catchError, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n  public apiUrl = environment.apiUrl;\n\n  constructor(\n    private http:HttpClient,\n    private router:Router\n  ) {}\n\n  get isLoggedIn(): boolean {\n    let authToken = (!!localStorage.getItem('auth'));\n    console.log('- isLoggedIn: ', authToken);\n    \n    return authToken;\n  }\n\n  login(userDataForm: User):Observable<any> {\n\n    return this.http.get(`${this.apiUrl}/users/`)\n      .pipe(\n        tap((response:any) => {\n          console.log('- User login data: ', response);\n          const { token } = response\n        }),\n        catchError(() => {\n          console.log('- Error al autenticar usuario...');\n          \n        })\n      )\n\n\n  }\n}"],"mappings":";AAIA,SAASA,WAAW,QAAQ,0CAA0C;AAGtE,SAAqBC,UAAU,EAAEC,GAAG,QAAQ,MAAM;;;;AAKlD,OAAM,MAAOC,cAAc;EAGzBC,YACUC,IAAe,EACfC,MAAa;IADb,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;IAJT,KAAAC,MAAM,GAAGP,WAAW,CAACO,MAAM;EAK/B;EAEH,IAAIC,UAAUA,CAAA;IACZ,IAAIC,SAAS,GAAI,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAE;IAChDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,SAAS,CAAC;IAExC,OAAOA,SAAS;EAClB;EAEAK,KAAKA,CAACC,YAAkB;IAEtB,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAC,GAAG,IAAI,CAACT,MAAM,SAAS,CAAC,CAC1CU,IAAI,CACHf,GAAG,CAAEgB,QAAY,IAAI;MACnBN,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEK,QAAQ,CAAC;MAC5C,MAAM;QAAEC;MAAK,CAAE,GAAGD,QAAQ;IAC5B,CAAC,CAAC,EACFjB,UAAU,CAAC,MAAK;MACdW,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAEjD,CAAC,CAAC,CACH;EAGL;;SA9BWV,cAAc;;mBAAdA,MAAc,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAAdtB,MAAc;EAAAuB,OAAA,EAAdvB,MAAc,CAAAwB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}