{"ast":null,"code":"var _class;\nimport { catchError, map, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = environment.apiUrl;\n    this.currentUser = {\n      id: '',\n      email: '',\n      username: '',\n      role: 'user'\n    };\n  }\n  get getToken() {\n    return localStorage.getItem('auth_token');\n  }\n  get isLoggedIn() {\n    let authToken = localStorage.getItem('auth_token');\n    console.log('- isLoggedIn: ', authToken);\n    return authToken !== null;\n  }\n  login(user) {\n    return this.http.get(`${this.apiUrl}/users/?email=${user.email}&password=${user.password}`).subscribe(response => {\n      console.log('- response: ', response);\n      if (response !== null) {\n        //localStorage.setItem('auth_token', uuid());\n        // this.getUserProfile(response.id).subscribe((response: any) => {\n        //   this.currentUser = response;\n        //   this.router.navigate(['home']);\n        // })\n      }\n    });\n  }\n  login(user) {\n    return this.http.post(`${this.apiUrl}/signin`, user).subscribe(res => {\n      localStorage.setItem('access_token', res.token);\n      this.getUserProfile(res._id).subscribe(res => {\n        this.currentUser = res;\n        this.router.navigate(['user-profile/' + res.msg._id]);\n      });\n    });\n  }\n  getUserProfile(id) {\n    let api = `${this.apiUrl}/users/${id}`;\n    return this.http.get(api).pipe(map(response => {\n      return response || {};\n    }), catchError(this.handleError));\n  }\n  logout() {\n    if (localStorage.removeItem('auth_token') == null) this.router.navigate(['login']);\n  }\n  handleError(error) {\n    let msg = '';\n    if (error.error instanceof ErrorEvent) {\n      msg = error.error.message;\n    } else {\n      msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(msg);\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","throwError","environment","AuthService","constructor","http","router","apiUrl","currentUser","id","email","username","role","getToken","localStorage","getItem","isLoggedIn","authToken","console","log","login","user","get","password","subscribe","response","post","res","setItem","token","getUserProfile","_id","navigate","msg","api","pipe","handleError","logout","removeItem","error","ErrorEvent","message","status","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/aarongl/Developer/PruebasTecnicas/1-todoList/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, catchError, map, of, tap, throwError } from 'rxjs';\n\nimport { v4 as uuid } from 'uuid';\n\nimport { environment } from 'src/environments/environment.development';\nimport { User } from '../interfaces/users.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public apiUrl:string = environment.apiUrl;\n  public currentUser:User = {\n    id: '',\n    email: '',\n    username: '',\n    role: 'user'\n  };\n\n  constructor(private http:HttpClient, private router:Router ) {}\n\n  get getToken() {\n    return localStorage.getItem('auth_token');\n  }\n\n  get isLoggedIn(): boolean {\n    let authToken = localStorage.getItem('auth_token');\n    console.log('- isLoggedIn: ', authToken);\n    \n    return authToken !== null;\n  }\n\n  login(user: User): Observable<any> {\n    return this.http.get(`${this.apiUrl}/users/?email=${user.email}&password=${user.password}`)\n      .subscribe((response: any) => {\n\n        console.log('- response: ', response);\n        \n\n        if (response !== null) {\n          //localStorage.setItem('auth_token', uuid());\n          \n\n          // this.getUserProfile(response.id).subscribe((response: any) => {\n          //   this.currentUser = response;\n          //   this.router.navigate(['home']);\n          // })\n        }\n      })\n  }\n\n  login(user: User) {\n    return this.http\n      .post<any>(`${this.apiUrl}/signin`, user)\n      .subscribe((res: any) => {\n        localStorage.setItem('access_token', res.token);\n        this.getUserProfile(res._id).subscribe((res) => {\n          this.currentUser = res;\n          this.router.navigate(['user-profile/' + res.msg._id]);\n        });\n      });\n  }\n\n  getUserProfile(id: number): Observable<any> {\n    let api = `${this.apiUrl}/users/${id}`;\n    return this.http.get(api)\n      .pipe(\n        map((response:any) => {\n          return response || {};\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  logout() {\n    if (localStorage.removeItem('auth_token') == null) this.router.navigate(['login']);\n  }\n\n  handleError(error: HttpErrorResponse) {\n    let msg = '';\n    if (error.error instanceof ErrorEvent) {\n      msg = error.error.message;\n    } else {\n      msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(msg);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}