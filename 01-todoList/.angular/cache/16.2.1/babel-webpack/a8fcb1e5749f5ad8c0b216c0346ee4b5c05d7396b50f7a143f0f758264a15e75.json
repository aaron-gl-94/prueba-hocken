{"ast":null,"code":"var _class;\nimport { v4 as uuid } from 'uuid';\nimport * as i0 from \"@angular/core\";\nexport class TasksService {\n  constructor() {\n    this.storageTasks = [];\n    this._loadFromLocalStorage();\n  }\n  _loadFromLocalStorage() {\n    if (!localStorage.getItem('storageTasks')) return;\n    this.storageTasks = JSON.parse(localStorage.getItem('storageTasks'));\n  }\n  _saveToLocalStorage() {\n    localStorage.setItem('storageTasks', JSON.stringify(this.storageTasks));\n    console.log('- saveToLocalStorage', this.storageTasks);\n  }\n  getToDosByStatus(status) {\n    return this.storageTasks.filter(task => task.status === status);\n  }\n  addTask(task) {\n    this.storageTasks.push({\n      idTodo: uuid(),\n      dateInitTodo: new Date(),\n      ...task\n    });\n    this._saveToLocalStorage();\n  }\n  removeAllToDos() {\n    this.storageTasks.map(storageTasks => storageTasks.status = 'removed');\n    this._saveToLocalStorage();\n  }\n  removeToDo(id) {\n    this.storageTasks.map(storageTasks => {\n      if (storageTasks.idTodo === id) {\n        storageTasks.status = 'removed';\n      }\n    });\n    this._saveToLocalStorage();\n  }\n  updateToDo(todo) {\n    console.log('- updateToDo: ', todo);\n    this.storageTasks.forEach(itemTodo => {\n      console.log(itemTodo);\n      if (todo.idTodo == itemTodo.idTodo) itemTodo.status = todo.status;\n    });\n    this._saveToLocalStorage();\n  }\n  updateAllToDos(status) {\n    console.log('- updateAllToDos()');\n    if (condition) {}\n    this.storageTasks.forEach(itemTodo => itemTodo.status = status);\n    this._saveToLocalStorage();\n  }\n  resetToDos() {\n    this.storageTasks = [];\n  }\n}\n_class = TasksService;\n_class.ɵfac = function TasksService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["v4","uuid","TasksService","constructor","storageTasks","_loadFromLocalStorage","localStorage","getItem","JSON","parse","_saveToLocalStorage","setItem","stringify","console","log","getToDosByStatus","status","filter","task","addTask","push","idTodo","dateInitTodo","Date","removeAllToDos","map","removeToDo","id","updateToDo","todo","forEach","itemTodo","updateAllToDos","condition","resetToDos","factory","ɵfac","providedIn"],"sources":["/Users/aarongl/Developer/PruebasTecnicas/1-todoList/src/app/services/tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { Status, ToDo } from '../interfaces/todos.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TasksService {\n\n  public storageTasks: ToDo[] = [];\n\n  constructor() {\n    this._loadFromLocalStorage()\n  }\n\n  private _loadFromLocalStorage() {\n    if (!localStorage.getItem('storageTasks')) return;\n\n    this.storageTasks = JSON.parse(localStorage.getItem('storageTasks')!)\n  }\n\n  private _saveToLocalStorage() {\n    localStorage.setItem('storageTasks', JSON.stringify(this.storageTasks));\n    console.log('- saveToLocalStorage', this.storageTasks);\n  }\n\n  public getToDosByStatus(status:string) {\n    return this.storageTasks.filter(task => task.status === status);\n  }\n  \n  public addTask(task: ToDo): void {\n    this.storageTasks.push({idTodo: uuid(), dateInitTodo: new Date(), ...task})\n    \n    this._saveToLocalStorage();\n  }\n\n  public removeAllToDos():void {\n    this.storageTasks.map(storageTasks => storageTasks.status = 'removed');\n\n    this._saveToLocalStorage();\n  }\n\n  public removeToDo(id: string): void {\n    this.storageTasks.map(storageTasks => {\n      if (storageTasks.idTodo === id) {\n        storageTasks.status = 'removed'\n      }\n    });\n\n    this._saveToLocalStorage();\n  }\n\n  public updateToDo(todo:any): void {\n    console.log('- updateToDo: ', todo);\n  \n    this.storageTasks.forEach(itemTodo => {\n      console.log(itemTodo);\n      \n      if (todo.idTodo == itemTodo.idTodo) itemTodo.status = todo.status;\n\n    });\n\n    this._saveToLocalStorage();\n  }\n\n  public updateAllToDos(status:Status): void {\n    console.log('- updateAllToDos()');\n    if (condition) {\n      \n    }\n    this.storageTasks.forEach(itemTodo => itemTodo.status = status);\n\n    this._saveToLocalStorage();\n  }\n\n  public resetToDos(): void {\n    this.storageTasks = [];\n  }\n}\n"],"mappings":";AACA,SAASA,EAAE,IAAIC,IAAI,QAAQ,MAAM;;AAOjC,OAAM,MAAOC,YAAY;EAIvBC,YAAA;IAFO,KAAAC,YAAY,GAAW,EAAE;IAG9B,IAAI,CAACC,qBAAqB,EAAE;EAC9B;EAEQA,qBAAqBA,CAAA;IAC3B,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,EAAE;IAE3C,IAAI,CAACH,YAAY,GAAGI,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,cAAc,CAAE,CAAC;EACvE;EAEQG,mBAAmBA,CAAA;IACzBJ,YAAY,CAACK,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,SAAS,CAAC,IAAI,CAACR,YAAY,CAAC,CAAC;IACvES,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAACV,YAAY,CAAC;EACxD;EAEOW,gBAAgBA,CAACC,MAAa;IACnC,OAAO,IAAI,CAACZ,YAAY,CAACa,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,MAAM,KAAKA,MAAM,CAAC;EACjE;EAEOG,OAAOA,CAACD,IAAU;IACvB,IAAI,CAACd,YAAY,CAACgB,IAAI,CAAC;MAACC,MAAM,EAAEpB,IAAI,EAAE;MAAEqB,YAAY,EAAE,IAAIC,IAAI,EAAE;MAAE,GAAGL;IAAI,CAAC,CAAC;IAE3E,IAAI,CAACR,mBAAmB,EAAE;EAC5B;EAEOc,cAAcA,CAAA;IACnB,IAAI,CAACpB,YAAY,CAACqB,GAAG,CAACrB,YAAY,IAAIA,YAAY,CAACY,MAAM,GAAG,SAAS,CAAC;IAEtE,IAAI,CAACN,mBAAmB,EAAE;EAC5B;EAEOgB,UAAUA,CAACC,EAAU;IAC1B,IAAI,CAACvB,YAAY,CAACqB,GAAG,CAACrB,YAAY,IAAG;MACnC,IAAIA,YAAY,CAACiB,MAAM,KAAKM,EAAE,EAAE;QAC9BvB,YAAY,CAACY,MAAM,GAAG,SAAS;;IAEnC,CAAC,CAAC;IAEF,IAAI,CAACN,mBAAmB,EAAE;EAC5B;EAEOkB,UAAUA,CAACC,IAAQ;IACxBhB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEe,IAAI,CAAC;IAEnC,IAAI,CAACzB,YAAY,CAAC0B,OAAO,CAACC,QAAQ,IAAG;MACnClB,OAAO,CAACC,GAAG,CAACiB,QAAQ,CAAC;MAErB,IAAIF,IAAI,CAACR,MAAM,IAAIU,QAAQ,CAACV,MAAM,EAAEU,QAAQ,CAACf,MAAM,GAAGa,IAAI,CAACb,MAAM;IAEnE,CAAC,CAAC;IAEF,IAAI,CAACN,mBAAmB,EAAE;EAC5B;EAEOsB,cAAcA,CAAChB,MAAa;IACjCH,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,IAAImB,SAAS,EAAE,C;IAGf,IAAI,CAAC7B,YAAY,CAAC0B,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACf,MAAM,GAAGA,MAAM,CAAC;IAE/D,IAAI,CAACN,mBAAmB,EAAE;EAC5B;EAEOwB,UAAUA,CAAA;IACf,IAAI,CAAC9B,YAAY,GAAG,EAAE;EACxB;;SAtEWF,YAAY;;mBAAZA,MAAY;AAAA;;SAAZA,MAAY;EAAAiC,OAAA,EAAZjC,MAAY,CAAAkC,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}