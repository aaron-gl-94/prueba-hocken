{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nexport let LoginPageComponent = class LoginPageComponent {\n  constructor(fb, router, authService) {\n    this.fb = fb;\n    this.router = router;\n    this.authService = authService;\n    this.loginForm = new FormGroup({});\n    this.isSubmitted = false;\n    this.isValid = false;\n    this.messageError = '';\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(8)]),\n      role: new FormControl('', [Validators.requiredTrue])\n    });\n  }\n  onLogin() {\n    const dataForm = this.loginForm.value;\n    this.isSubmitted = true;\n    this.messageError = '';\n    if (dataForm.email === '') this.messageError += '- Debe agregar su \"Nombre de usuario\".<br>';\n    if (dataForm.password === '') this.messageError += '- Debe agregar su \"Contrase침a\".<br>';\n    if (dataForm.role === '') this.messageError += '- Debe selecionar una opci칩n de \"Rol\"<br>';\n    if (this.messageError.length === 0) this.loginForm.valid;\n    console.log('- login Data', dataForm);\n    this.authService.login(dataForm).subscribe(response => {\n      console.log(response);\n      this.router.navigate(['/', 'home']);\n    });\n  }\n};\nLoginPageComponent = __decorate([Component({\n  selector: 'login-page',\n  templateUrl: './login-page.component.html'\n})], LoginPageComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","LoginPageComponent","constructor","fb","router","authService","loginForm","isSubmitted","isValid","messageError","ngOnInit","email","required","password","minLength","maxLength","role","requiredTrue","onLogin","dataForm","value","length","valid","console","log","login","subscribe","response","navigate","__decorate","selector","templateUrl"],"sources":["/Users/aarongl/Developer/PruebasTecnicas/1-todoList/src/app/pages/login-page/login-page.component.ts"],"sourcesContent":["import { Component} from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { authService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'login-page',\n  templateUrl: './login-page.component.html'\n})\nexport class LoginPageComponent {\n  constructor(\n    public fb:FormBuilder,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  public loginForm: FormGroup = new FormGroup({});\n\n  public isSubmitted:boolean = false;\n  public isValid: boolean = false;\n  public messageError:string = '';\n\n  ngOnInit(): void {\n    this.loginForm = new FormGroup(\n      {\n        email: new FormControl('', [\n          Validators.required,\n          Validators.email\n        ]),\n        password: new FormControl('', [\n          Validators.required,\n          Validators.minLength(5),\n          Validators.maxLength(8)\n        ]),\n        role: new FormControl('', [Validators.requiredTrue])\n      }\n    );\n  }\n\n  onLogin():any{\n    const dataForm    = this.loginForm.value;\n    this.isSubmitted  = true;\n    this.messageError = '';\n\n    if (dataForm.email === '')\n      this.messageError += '- Debe agregar su \"Nombre de usuario\".<br>' ;\n\n    if (dataForm.password === '')\n      this.messageError += '- Debe agregar su \"Contrase침a\".<br>';\n\n    if (dataForm.role === '')\n      this.messageError += '- Debe selecionar una opci칩n de \"Rol\"<br>';\n\n  \n    if (this.messageError.length === 0)\n      this.loginForm.valid\n    \n    console.log('- login Data', dataForm);\n\n    this.authService.login(dataForm)\n      .subscribe((response: any) => {\n        console.log(response);\n\n        this.router.navigate(['/', 'home'])\n      })\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAO,eAAe;AACxC,SAAsBC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAQzE,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAC7BC,YACSC,EAAc,EACbC,MAAc,EACdC,WAAwB;IAFzB,KAAAF,EAAE,GAAFA,EAAE;IACD,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IAGd,KAAAC,SAAS,GAAc,IAAIP,SAAS,CAAC,EAAE,CAAC;IAExC,KAAAQ,WAAW,GAAW,KAAK;IAC3B,KAAAC,OAAO,GAAY,KAAK;IACxB,KAAAC,YAAY,GAAU,EAAE;EAN5B;EAQHC,QAAQA,CAAA;IACN,IAAI,CAACJ,SAAS,GAAG,IAAIP,SAAS,CAC5B;MACEY,KAAK,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAE,CACzBE,UAAU,CAACY,QAAQ,EACnBZ,UAAU,CAACW,KAAK,CACjB,CAAC;MACFE,QAAQ,EAAE,IAAIf,WAAW,CAAC,EAAE,EAAE,CAC5BE,UAAU,CAACY,QAAQ,EACnBZ,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,EACvBd,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,CACxB,CAAC;MACFC,IAAI,EAAE,IAAIlB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACiB,YAAY,CAAC;KACpD,CACF;EACH;EAEAC,OAAOA,CAAA;IACL,MAAMC,QAAQ,GAAM,IAAI,CAACb,SAAS,CAACc,KAAK;IACxC,IAAI,CAACb,WAAW,GAAI,IAAI;IACxB,IAAI,CAACE,YAAY,GAAG,EAAE;IAEtB,IAAIU,QAAQ,CAACR,KAAK,KAAK,EAAE,EACvB,IAAI,CAACF,YAAY,IAAI,4CAA4C;IAEnE,IAAIU,QAAQ,CAACN,QAAQ,KAAK,EAAE,EAC1B,IAAI,CAACJ,YAAY,IAAI,qCAAqC;IAE5D,IAAIU,QAAQ,CAACH,IAAI,KAAK,EAAE,EACtB,IAAI,CAACP,YAAY,IAAI,2CAA2C;IAGlE,IAAI,IAAI,CAACA,YAAY,CAACY,MAAM,KAAK,CAAC,EAChC,IAAI,CAACf,SAAS,CAACgB,KAAK;IAEtBC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEL,QAAQ,CAAC;IAErC,IAAI,CAACd,WAAW,CAACoB,KAAK,CAACN,QAAQ,CAAC,CAC7BO,SAAS,CAAEC,QAAa,IAAI;MAC3BJ,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;MAErB,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACrC,CAAC,CAAC;EACN;CACD;AAzDY3B,kBAAkB,GAAA4B,UAAA,EAJ9BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE;CACd,CAAC,C,EACW9B,kBAAkB,CAyD9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}