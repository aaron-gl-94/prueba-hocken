{"ast":null,"code":"var _class;\nimport { v4 as uuid } from 'uuid';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TasksService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n    this.storageTasks = [];\n    this._loadTodosFromDB();\n  }\n  _loadTodosFromDB() {\n    return this.http.get(`${this.apiUrl}/todos`).pipe(tap(todos => {}));\n    if (!localStorage.getItem('storageTasks')) return;\n    this.storageTasks = JSON.parse(localStorage.getItem('storageTasks'));\n  }\n  _saveToLocalStorage() {\n    localStorage.setItem('storageTasks', JSON.stringify(this.storageTasks));\n    console.log('- saveToLocalStorage', this.storageTasks);\n  }\n  getToDosByStatus(status) {\n    return this.storageTasks.filter(task => task.status === status);\n  }\n  addTask(task) {\n    this.storageTasks.push({\n      id: uuid(),\n      dateInitTodo: new Date(),\n      ...task\n    });\n    this._saveToLocalStorage();\n  }\n  removeAllToDos() {\n    this.storageTasks.forEach(storageTasks => storageTasks.status = 'removed');\n    this._saveToLocalStorage();\n  }\n  removeToDo(id) {\n    this.storageTasks.forEach(storageTasks => {\n      if (storageTasks.id === id) {\n        storageTasks.status = 'removed';\n      }\n    });\n    this._saveToLocalStorage();\n  }\n  updateToDo(todo) {\n    console.log('- updateToDo: ', todo);\n    this.storageTasks.forEach(itemTodo => {\n      console.log(itemTodo);\n      if (todo.id == itemTodo.id) itemTodo.status = todo.status;\n    });\n    this._saveToLocalStorage();\n  }\n  updateAllToDos(status) {\n    console.log('- updateAllToDos()');\n    this.storageTasks.forEach(itemTodo => {\n      if (itemTodo.status == 'removed' && status === 'end') return;\n      itemTodo.status = status;\n    });\n    this._saveToLocalStorage();\n  }\n  resetToDos() {\n    this.storageTasks = [];\n  }\n}\n_class = TasksService;\n_class.ɵfac = function TasksService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["v4","uuid","environment","TasksService","constructor","http","apiUrl","storageTasks","_loadTodosFromDB","get","pipe","tap","todos","localStorage","getItem","JSON","parse","_saveToLocalStorage","setItem","stringify","console","log","getToDosByStatus","status","filter","task","addTask","push","id","dateInitTodo","Date","removeAllToDos","forEach","removeToDo","updateToDo","todo","itemTodo","updateAllToDos","resetToDos","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/aarongl/Developer/PruebasTecnicas/1-todoList/src/app/services/tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\nimport { Status, ToDo } from '../interfaces/todos.interface';\n\nimport { environment } from 'src/environments/environment.development';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TasksService {\n  public apiUrl:string = environment.apiUrl;\n\n  public storageTasks: ToDo[] = [];\n\n  constructor(private http:HttpClient) {\n    this._loadTodosFromDB()\n  }\n\n  private _loadTodosFromDB() {\n\n    return this.http.get(`${this.apiUrl}/todos`)\n      .pipe(\n        tap((todos:any) => {})\n      )\n\n\n\n\n    if (!localStorage.getItem('storageTasks')) return;\n\n    this.storageTasks = JSON.parse(localStorage.getItem('storageTasks')!)\n  }\n\n  private _saveToLocalStorage() {\n    localStorage.setItem('storageTasks', JSON.stringify(this.storageTasks));\n    console.log('- saveToLocalStorage', this.storageTasks);\n  }\n\n  public getToDosByStatus(status:string) {\n    return this.storageTasks.filter(task => task.status === status);\n  }\n  \n  public addTask(task: ToDo): void {\n    this.storageTasks.push({id: uuid(), dateInitTodo: new Date(), ...task})\n    \n    this._saveToLocalStorage();\n  }\n\n  public removeAllToDos():void {\n    this.storageTasks.forEach(storageTasks => storageTasks.status = 'removed');\n\n    this._saveToLocalStorage();\n  }\n\n  public removeToDo(id: string): void {\n    this.storageTasks.forEach(storageTasks => {\n      if (storageTasks.id === id) {\n        storageTasks.status = 'removed'\n      }\n    });\n\n    this._saveToLocalStorage();\n  }\n\n  public updateToDo(todo:any): void {\n    console.log('- updateToDo: ', todo);\n  \n    this.storageTasks.forEach(itemTodo => {\n      console.log(itemTodo);\n      \n      if (todo.id == itemTodo.id) itemTodo.status = todo.status;\n\n    });\n\n    this._saveToLocalStorage();\n  }\n\n  public updateAllToDos(status:Status): void {\n    console.log('- updateAllToDos()');\n    this.storageTasks.forEach(itemTodo => {\n      \n      if (itemTodo.status == 'removed' && status === 'end') return;\n      \n      itemTodo.status = status;\n    });\n\n    this._saveToLocalStorage();\n  }\n\n  public resetToDos(): void {\n    this.storageTasks = [];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}