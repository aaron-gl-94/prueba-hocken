{"ast":null,"code":"var _class;\nimport { v4 as uuid } from 'uuid';\nimport * as i0 from \"@angular/core\";\nexport class SessionService {\n  constructor() {\n    this.storageUserSession = [];\n    this.userSession = {\n      userId: '',\n      username: '',\n      role: false\n    };\n    this._loadUserFromStorage();\n  }\n  _loadUserFromStorage() {\n    if (!localStorage.getItem('storageUsersSessions')) return;\n    this.storageUserSession = JSON.parse(localStorage.getItem('storageUsersSessions'));\n  }\n  _saveUserSession() {\n    localStorage.setItem('userSession', JSON.stringify(this.storageUserSession));\n  }\n  _setUserSession(userData) {\n    this.userSession.push({\n      userId: uuid(),\n      ...userData\n    });\n    this._saveUserSession();\n  }\n  _removeUserSession(username) {\n    this.storageUserSession = this.storageUserSession.filter(storageUsers => storageUsers.username !== username);\n  }\n  login(userLogin) {\n    console.log(userLogin);\n    this.storageUserSession.forEach(storageUser => {\n      console.log(storageUser);\n      if (storageUser.username === userLogin.username) {\n        console.log('- userID Found: ' + storageUser.userId);\n        this.userSession.userId = storageUser.userId;\n      }\n    });\n    // if (!userFound) this._setUserSession({...userLogin});\n    console.log(this.userSession);\n  }\n  logout(username) {\n    this._removeUserSession(username);\n  }\n}\n_class = SessionService;\n_class.ɵfac = function SessionService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["v4","uuid","SessionService","constructor","storageUserSession","userSession","userId","username","role","_loadUserFromStorage","localStorage","getItem","JSON","parse","_saveUserSession","setItem","stringify","_setUserSession","userData","push","_removeUserSession","filter","storageUsers","login","userLogin","console","log","forEach","storageUser","logout","factory","ɵfac","providedIn"],"sources":["/Users/aarongl/Developer/PruebasTecnicas/1-todoList/src/app/services/session.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\nimport { UserLogin, UserSession } from '../interfaces/users.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  public storageUserSession: UserSession[] = [];\n  public userSession: UserSession = {\n    userId: '',\n    username: '',\n    role: false\n  };\n\n  constructor() {\n    this._loadUserFromStorage();\n  }\n\n  private _loadUserFromStorage():void {\n    if (!localStorage.getItem('storageUsersSessions')) return;\n\n    this.storageUserSession = JSON.parse(localStorage.getItem('storageUsersSessions')!)\n  }\n\n  private _saveUserSession():void {\n    localStorage.setItem('userSession', JSON.stringify(this.storageUserSession));\n  }\n\n  private _setUserSession(userData:UserSession):void {\n    this.userSession.push({ userId: uuid(), ...userData })\n    this._saveUserSession();\n  }\n\n  private _removeUserSession(username:string):void {\n    this.storageUserSession = this.storageUserSession.filter(storageUsers => storageUsers.username !== username);\n  }\n  \n  public login(userLogin:UserLogin):void {\n    console.log(userLogin);\n    \n    this.storageUserSession.forEach(storageUser => {\n      console.log(storageUser);\n\n      if (storageUser.username === userLogin.username) {\n        console.log('- userID Found: '+storageUser.userId);\n\n        this.userSession.userId = storageUser.userId;\n      }\n    });\n\n    // if (!userFound) this._setUserSession({...userLogin});\n    \n\n    console.log(this.userSession);\n  }\n\n  public logout(username: string):void {\n    this._removeUserSession(username);\n  }\n}\n"],"mappings":";AACA,SAASA,EAAE,IAAIC,IAAI,QAAQ,MAAM;;AAMjC,OAAM,MAAOC,cAAc;EASzBC,YAAA;IAPO,KAAAC,kBAAkB,GAAkB,EAAE;IACtC,KAAAC,WAAW,GAAgB;MAChCC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE;KACP;IAGC,IAAI,CAACC,oBAAoB,EAAE;EAC7B;EAEQA,oBAAoBA,CAAA;IAC1B,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC,EAAE;IAEnD,IAAI,CAACP,kBAAkB,GAAGQ,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAE,CAAC;EACrF;EAEQG,gBAAgBA,CAAA;IACtBJ,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACI,SAAS,CAAC,IAAI,CAACZ,kBAAkB,CAAC,CAAC;EAC9E;EAEQa,eAAeA,CAACC,QAAoB;IAC1C,IAAI,CAACb,WAAW,CAACc,IAAI,CAAC;MAAEb,MAAM,EAAEL,IAAI,EAAE;MAAE,GAAGiB;IAAQ,CAAE,CAAC;IACtD,IAAI,CAACJ,gBAAgB,EAAE;EACzB;EAEQM,kBAAkBA,CAACb,QAAe;IACxC,IAAI,CAACH,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAACiB,MAAM,CAACC,YAAY,IAAIA,YAAY,CAACf,QAAQ,KAAKA,QAAQ,CAAC;EAC9G;EAEOgB,KAAKA,CAACC,SAAmB;IAC9BC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IAEtB,IAAI,CAACpB,kBAAkB,CAACuB,OAAO,CAACC,WAAW,IAAG;MAC5CH,OAAO,CAACC,GAAG,CAACE,WAAW,CAAC;MAExB,IAAIA,WAAW,CAACrB,QAAQ,KAAKiB,SAAS,CAACjB,QAAQ,EAAE;QAC/CkB,OAAO,CAACC,GAAG,CAAC,kBAAkB,GAACE,WAAW,CAACtB,MAAM,CAAC;QAElD,IAAI,CAACD,WAAW,CAACC,MAAM,GAAGsB,WAAW,CAACtB,MAAM;;IAEhD,CAAC,CAAC;IAEF;IAGAmB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrB,WAAW,CAAC;EAC/B;EAEOwB,MAAMA,CAACtB,QAAgB;IAC5B,IAAI,CAACa,kBAAkB,CAACb,QAAQ,CAAC;EACnC;;SArDWL,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAA4B,OAAA,EAAd5B,MAAc,CAAA6B,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}