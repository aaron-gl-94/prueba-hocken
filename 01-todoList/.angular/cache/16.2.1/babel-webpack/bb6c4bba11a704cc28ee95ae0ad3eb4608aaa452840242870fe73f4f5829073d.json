{"ast":null,"code":"var _class;\nimport { v4 as uuid } from 'uuid';\nimport * as i0 from \"@angular/core\";\nexport class SessionService {\n  constructor() {\n    this.storageUserSession = [];\n    this.userSession = {\n      username: '',\n      role: false,\n      isLogin: false\n    };\n    this._getUserFromStorage();\n  }\n  _getUserFromStorage() {\n    if (!localStorage.getItem('storageUserSession')) return;\n    this.storageUserSession = JSON.parse(localStorage.getItem('storageUserSession'));\n  }\n  _saveUserSession() {\n    localStorage.setItem('userSession', JSON.stringify(this.storageUserSession));\n  }\n  _setUserSession(userData) {\n    this.storageUserSession.push({\n      userId: uuid(),\n      ...userData\n    });\n    this._saveUserSession();\n  }\n  _removeUserSession(username) {\n    this.storageUserSession = this.storageUserSession.filter(storageUsers => storageUsers.username !== username);\n  }\n  login(userLogin) {\n    let userFound = false;\n    this.storageUserSession.forEach(storageUsers => {\n      if (storageUsers.username == userLogin.username) {\n        this.userSession = {\n          isLogin: true,\n          ...storageUsers\n        };\n        userFound = true;\n        console.log(storageUsers);\n      }\n    });\n    if (!userFound) this._setUserSession({\n      isLogin: true,\n      ...userLogin\n    });\n  }\n  logout(username) {\n    this._removeUserSession(username);\n  }\n}\n_class = SessionService;\n_class.ɵfac = function SessionService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["v4","uuid","SessionService","constructor","storageUserSession","userSession","username","role","isLogin","_getUserFromStorage","localStorage","getItem","JSON","parse","_saveUserSession","setItem","stringify","_setUserSession","userData","push","userId","_removeUserSession","filter","storageUsers","login","userLogin","userFound","forEach","console","log","logout","factory","ɵfac","providedIn"],"sources":["/Users/aarongl/Developer/PruebasTecnicas/1-todoList/src/app/services/session.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\nimport { UserLogin, UserSession } from '../interfaces/users.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  public storageUserSession: UserSession[] = [];\n  public userSession: UserSession = {\n    username: '',\n    role: false,\n    isLogin: false\n  };\n\n  constructor() {\n    this._getUserFromStorage()\n  }\n\n  private _getUserFromStorage():void {\n    if (!localStorage.getItem('storageUserSession')) return;\n\n    this.storageUserSession = JSON.parse(localStorage.getItem('storageUserSession')!)\n  }\n\n  private _saveUserSession():void {\n    localStorage.setItem('userSession', JSON.stringify(this.storageUserSession));\n  }\n\n  private _setUserSession(userData:UserSession):void {\n    this.storageUserSession.push({ userId: uuid(), ...userData })\n    this._saveUserSession();\n  }\n\n  private _removeUserSession(username:string):void {\n    this.storageUserSession = this.storageUserSession.filter(storageUsers => storageUsers.username !== username);\n  }\n  \n  public login(userLogin:UserLogin):void {\n    let userFound = false;\n\n    this.storageUserSession.forEach(storageUsers => {\n\n      if (storageUsers.username == userLogin.username) {\n        \n        this.userSession = ({isLogin: true, ...storageUsers});\n        userFound = true;\n        console.log(storageUsers);\n      }\n\n    });\n\n    if (!userFound) this._setUserSession({isLogin:true, ...userLogin});\n  }\n\n  public logout(username: string):void {\n    this._removeUserSession(username);\n  }\n}\n"],"mappings":";AACA,SAASA,EAAE,IAAIC,IAAI,QAAQ,MAAM;;AAMjC,OAAM,MAAOC,cAAc;EASzBC,YAAA;IAPO,KAAAC,kBAAkB,GAAkB,EAAE;IACtC,KAAAC,WAAW,GAAgB;MAChCC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE,KAAK;MACXC,OAAO,EAAE;KACV;IAGC,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEQA,mBAAmBA,CAAA;IACzB,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,EAAE;IAEjD,IAAI,CAACP,kBAAkB,GAAGQ,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAE,CAAC;EACnF;EAEQG,gBAAgBA,CAAA;IACtBJ,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACI,SAAS,CAAC,IAAI,CAACZ,kBAAkB,CAAC,CAAC;EAC9E;EAEQa,eAAeA,CAACC,QAAoB;IAC1C,IAAI,CAACd,kBAAkB,CAACe,IAAI,CAAC;MAAEC,MAAM,EAAEnB,IAAI,EAAE;MAAE,GAAGiB;IAAQ,CAAE,CAAC;IAC7D,IAAI,CAACJ,gBAAgB,EAAE;EACzB;EAEQO,kBAAkBA,CAACf,QAAe;IACxC,IAAI,CAACF,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAACkB,MAAM,CAACC,YAAY,IAAIA,YAAY,CAACjB,QAAQ,KAAKA,QAAQ,CAAC;EAC9G;EAEOkB,KAAKA,CAACC,SAAmB;IAC9B,IAAIC,SAAS,GAAG,KAAK;IAErB,IAAI,CAACtB,kBAAkB,CAACuB,OAAO,CAACJ,YAAY,IAAG;MAE7C,IAAIA,YAAY,CAACjB,QAAQ,IAAImB,SAAS,CAACnB,QAAQ,EAAE;QAE/C,IAAI,CAACD,WAAW,GAAI;UAACG,OAAO,EAAE,IAAI;UAAE,GAAGe;QAAY,CAAE;QACrDG,SAAS,GAAG,IAAI;QAChBE,OAAO,CAACC,GAAG,CAACN,YAAY,CAAC;;IAG7B,CAAC,CAAC;IAEF,IAAI,CAACG,SAAS,EAAE,IAAI,CAACT,eAAe,CAAC;MAACT,OAAO,EAAC,IAAI;MAAE,GAAGiB;IAAS,CAAC,CAAC;EACpE;EAEOK,MAAMA,CAACxB,QAAgB;IAC5B,IAAI,CAACe,kBAAkB,CAACf,QAAQ,CAAC;EACnC;;SAnDWJ,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAA6B,OAAA,EAAd7B,MAAc,CAAA8B,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}